/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interrupção;

import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fernandes
 */
public class Interface extends javax.swing.JFrame {
    static ArrayList <Process> process = new ArrayList();
    static ArrayList <Process> finalizados = new ArrayList();
    static Random rand = new Random();
    static Thread myThread;
    
    /**
     * Creates new form Interface
     */
    public Interface() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        tabelaTlb = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Processos = new javax.swing.JTable();
        botao = new javax.swing.JButton();
        Clock = new javax.swing.JLabel();

        tabelaTlb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Página", "Quadro"
            }
        ));
        jScrollPane6.setViewportView(tabelaTlb);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador de interrupções");
        setBackground(new java.awt.Color(204, 255, 255));
        setLocation(new java.awt.Point(450, 100));
        setPreferredSize(new java.awt.Dimension(640, 600));
        setResizable(false);

        Processos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Index", "Length", "Arrive", "Status", "Interrupting time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Processos);
        Processos.getColumnModel().getColumn(0).setPreferredWidth(27);

        botao.setText("Iniciar");
        botao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoActionPerformed(evt);
            }
        });

        Clock.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Clock.setForeground(new java.awt.Color(0, 51, 51));
        Clock.setText("Clock : 0 segundos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Clock)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(botao, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Clock)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botao)
                .addContainerGap(839, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoActionPerformed
        // TODO add your handling code here:
        
        //Pega a quantidade de processos do usuário;
        String aux = null;
        try
        {
             aux = JOptionPane.showInputDialog("Digite a quantidade de processos");
        }catch(IllegalArgumentException e)
        {
            System.out.println(e.getMessage());
        }
        //Invoca o método que gera os processos
        geraProcessos(Integer.parseInt(aux));
   
        botao.setVisible(false);
        
        //Pega o modelo da tabela da jFrame;
        DefaultTableModel tabela = (DefaultTableModel) Processos.getModel();
        
        //Adiciona a quantidade de linhas de acordo com a quantidade de processos
        for(int i = 0; i < process.size(); i++)
        {
            tabela.addRow(new Object[]{null,null});
        }
        
        //Inicia a thread;
        myThread = new Thread()
        {   
            int segundos;
            @Override
            public void run(){
                //Faz a thread "dormir" por um segundo para simular um clock;
                while(true){
                    try{
                        Thread.sleep(1000);
                    }catch(Exception e) {}
                    segundos++;
                    
                    
                    //Verifica se os processos acabaram
                    if(verifyFinish())
                    {
                        JOptionPane.showMessageDialog(null,"Acabou");
                        botao.setText("Reiniciar");
                        for(int i = 0; i < process.size(); i++)
                        {
                            tabela.removeRow(0);
                        }
                        process.clear();
                        botao.setVisible(true);
                        this.stop();
                    }
                    //Atualiza o clock no console e na janela do progrma;
                    System.out.println("\t\tClock = " + segundos);
                    Clock.setText("Clock : "+ Integer.toString(segundos) + " segundos");
                    
                    //Imprime o nome das colunas no console
                    System.out.println("id" + "\t" + "index" + "\t" + "lenght" + "\t" + "arrive" + "\t" + "status" + "\t" + "prioridade");
                    
                    //Percorre os processos para executá-los
                    for(int i = 0; i < process.size(); i++)
                    {
                        //Testa se o processo tem a flag para ser interrompido e se já executou mais que a metade
                        //Obs: foi escolhido interromper na metade de forma arbitrária
                        if(process.get(i).isInterrupted() && (process.get(i).getIndex() >= process.get(i).getLenght()/2))
                        {
                            //Gera um tempo de interrupção para o processo;
                            if(process.get(i).getPriority(i) == 0)
                            {
                                process.get(i).setPriority(i, rand.nextInt(5)+1);
                                process.get(i).setStatus("Interrompido");
                            }
                            //Se já foi gerado, apenas decrementa o tempo;
                            else
                            {
                                process.get(i).decrementPriority(i);
                                process.get(i).setStatus("Interrompido");

                            }
                            //Testa se o tempo de interrupção acabou e retorna a execução do processo;
                            if(process.get(i).getPriority(i) == 0)
                            {
                                process.get(i).setInterrupted(false);
                                process.get(i).setStatus("Executando");
                            }                                    
                        }
                        //Testa se já é o tempo de chegada do processo, se for começa a executá-lo;
                        if(process.get(i).getArrive() == segundos)
                        {
                            process.get(i).setStatus("Executando");
                            System.out.println(process.get(i));
                        }
                        
                        //Se o processo já está executando, incrementa seu índice de execução;
                        if(process.get(i).getStatus() == "Executando")
                            process.get(i).incrementIndex();
                        //Testa se o processo acabou;
                        if(process.get(i).finish())
                            process.get(i).setStatus("Acabou");
                    }
                    
                    //Laço que atualiza no console as informações sobre os processos;
                    for(int i = 0; i < process.size(); i++)
                    {
                        System.out.println(process.get(i));
                        tabela.setValueAt(i, i, 0);
                        tabela.setValueAt(process.get(i).getIndex(), i, 1);
                        tabela.setValueAt(process.get(i).getLenght(), i, 2);
                        tabela.setValueAt(process.get(i).getArrive(), i, 3);
                        tabela.setValueAt(process.get(i).getStatus(), i, 4);
                        tabela.setValueAt(process.get(i).getPriority(i), i, 5);
                    }
                }
            }
        };
        myThread.start();
      
    }//GEN-LAST:event_botaoActionPerformed
    
        
    /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Interface().setVisible(true);
            
        });
        
    }
  
    //Método que gera processos;
    public static void geraProcessos(int length_process){
        for(int i = 0; i < length_process; i++)
        {
            Process p;
            //Decide aleatóriamente qual processo será interrompido;
            if(rand.nextBoolean())
               p = new Process(i, rand.nextInt(9)+3, true, rand.nextInt(4)+1, 0);
            else
               p = new Process(i, 4, false, i+1, 0);
            //Adiciona a lista de processos;
            process.add(p);
        }
    }
    //Método que verifica se todos processos foram finalizados;
    public static boolean verifyFinish()
    {
        //Percorre todos os processos. Se um está excutando, retorna falso.
        for(int i = 0; i < process.size(); i++)
        {
            if(!process.get(i).finish())
                return false;
        }
        return true;
    }
    
     
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Clock;
    private javax.swing.JTable Processos;
    private javax.swing.JButton botao;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable tabelaTlb;
    // End of variables declaration//GEN-END:variables
}
